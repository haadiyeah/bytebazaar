package bytebazaar;

import java.util.LinkedList;

public class BuyerLedger {
    private LinkedList<Buyer> buyerAccounts;

    public BuyerLedger() {
        buyerAccounts = new LinkedList<Buyer>();
    }

    // This fucntion creates NEW user as buyer(Default) and returns the newly
    // assigned UserID
    // which is autogenerated by DB (using identity)
    // Note: -1 means failed to save, -2 means sql exception occurred
    public int createBuyer(String name, String email, String phone, String password) {

        if (DBHandler.getInstance().checkUserExists(email) == false) {
            Buyer b = new Buyer(email, password, phone, name);

            int newBuyerID = DBHandler.getInstance().saveBuyer(b);
            if (newBuyerID > 0) { // no error occurred;
                b.setID(newBuyerID); // Setting the return ID
                buyerAccounts.add(b);
                // this.userLedger.add(b); // save to the ledger ,for quick reference, as most
                // will login after signup.
            }
            return newBuyerID;
        } else {
            // An acc already exists with this email
            return -1;
        }
    }

    public LinkedList<Order> getOrders(int BID) {
        for (Buyer variable : buyerAccounts) {
            if (variable.getID() == BID) {
                return variable.getOrders().getOrderList();
            }
        }
        return null;
    }

    public int findInLedger(String email, String password) {
        for (int i = 0; i < buyerAccounts.size(); i++) {
            if (buyerAccounts.get(i).getEmail().equals(email) && buyerAccounts.get(i).getPassword().equals(password)) {
                return i;
            }
        }
        return -1;
    }

    public int loginRequest(String email, String password) {
        int check = findInLedger(email, password);
        if (check != -1) {
            return buyerAccounts.get(check).getID();
        }

        Buyer b = DBHandler.getInstance().authenticateBuyerLogin(email, password);
        if (b != null) {
            b.setDetails();// will call the buyer's setdetails func, to create cart and orderlog
            buyerAccounts.add(b);
            return b.getID();
        } else {
            return -1;
        }
    }

    // Find the buyer with the given ID and adds the product passed to their cart.
    public void addToCart(int buyerID, Product prod) {
        buyerAccounts.forEach(buyer -> {
            if (buyer.getID() == buyerID) {
                buyer.addToCart(prod);
                return;
            }
        });
    }

    public LinkedList<SalesLineItem> getCartList(int buyerID) {
        if (getBuyerByID(buyerID) != null)
            return getBuyerByID(buyerID).getCartList();
        else
            return new LinkedList<SalesLineItem>();// returning empty list
    }

    public boolean updateBuyer(int buyerID, String name, String email, String password, String phone, String address) {
        if (DBHandler.getInstance().updateBuyer(buyerID, name, email, password, phone, address)) {
            int index = getBuyerIndex(buyerID);
            buyerAccounts.get(index).setName(name);
            buyerAccounts.get(index).setEmail(email);
            buyerAccounts.get(index).setPassword(password);
            buyerAccounts.get(index).setPhoneNum("" + phone);
            buyerAccounts.get(index).setDeliveryDetails(address);
            return true;
        } else {
            return false;
        }
    }

    public boolean deleteBuyer(int buyerID) {
        boolean ret = DBHandler.getInstance().deleteUser(buyerID);
        buyerAccounts.remove(getBuyerByID(buyerID));
        return ret;
    }

    // Find buyer with the given ID and return its object
    public Buyer getBuyerByID(int ID) {
        for (int i = 0; i < buyerAccounts.size(); i++) {
            if (buyerAccounts.get(i).getID() == ID) {
                return buyerAccounts.get(i);
            }
        }
        return null;
    }

    private int getBuyerIndex(int buyerID) {
        for (int i = 0; i < buyerAccounts.size(); i++) {
            if (buyerAccounts.get(i).getID() == buyerID) {
                return i;
            }
        }
        return -1;
    }

    // public void setCurrentBuyer(Buyer currentBuyer) {
    // //buyerAccounts.add(currentBuyer);
    // }

    // public void addToCurrentUsersCart(Product p) {
    // buyerAccounts.getFirst().addToCart(p);
    // }

    // public int findIDInLedger(String email, String password) {
    // for (int i = 0; i < buyerAccounts.size(); i++) {
    // if (buyerAccounts.get(i).getEmail().equals(email) &&
    // buyerAccounts.get(i).getPassword().equals(password)) {
    // buyerAccounts.get(i).getID();
    // }
    // }
    // return -1;
    // }

}
