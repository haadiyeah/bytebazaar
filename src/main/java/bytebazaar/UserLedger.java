package bytebazaar;

import java.util.LinkedList;

public class UserLedger {
    private LinkedList<User> userLedger; // list of buyers,but not the complete list
    private User currentUser; // reference to current buyer will be stored when logged in

    public UserLedger() {
        userLedger = new LinkedList<User>();
    }

    // This fucntion creates NEW user as buyer(Default) and returns the newly
    // assigned UserID
    // which is autogenerated by DB (using identity)
    // Note: -1 means failed to save, -2 means sql exception occurred
    public int createUser(String name, String email, String phone, String password) {
        if (DBHandler.getInstance().checkUserExists(email) == false) {
            Buyer b = new Buyer(email, password, phone, name);
           
            int returnID = DBHandler.getInstance().save(b);
            if (returnID > 0) { // no error occurred;
                b.setID(returnID); // Setting the return ID
                this.userLedger.add(b); // save to the ledger ,for quick reference, as most will login after signup.
            }
            return returnID;
        } else {
            // An acc already exists with this email
            return -1;
        }
    }

    public boolean checkInLedger(String email, String password) {
        for(int i=0; i<userLedger.size(); i++) {
            if(userLedger.get(i).getEmail().equals(email) && userLedger.get(i).getPassword().equals(password)) {
                return true;
            }
        }
        return false;
    }

    public boolean loginRequest(String email, String password, String userType) {
       if(checkInLedger(email, password)) {
            return true;
       } 
        if (userType.equals("Buyer")) {
            Buyer b = (Buyer)DBHandler.getInstance().authenticateLogin(email, password, userType);
            if (b != null) {
                currentUser = b;
                System.out.println("SETTING CURRENT USERRRRRR");
                currentUser.setDetails();// will call the buyer's setdetails func, to create cart and orderlog
                userLedger.add(b);
                return true;
            } else {
                System.out.println("authenticate login returned null for buyerrr");
                return false;
            }
        } else if (userType.equals("Seller")) {
            Seller s = (Seller)DBHandler.getInstance().authenticateLogin(email, password, userType);
            if (s != null) {
                currentUser = s;
                currentUser.setDetails();// will call the seller's setdetails func, to add order-recieved log and
                                         // product catalog
                userLedger.add(s);
                return true;
            } else {
                System.out.println("authenticate login returned null for seller");
                return false;
            }
        } else if (userType.equals("Admin")) {
            Admin a = (Admin)DBHandler.getInstance().authenticateLogin(email, password, userType);
            if (a != null) {
                currentUser = a;
                userLedger.add(a);
                return true;
            } else {
                System.out.println("authenticate login returned null for admin");
                return false;
            }
        } else {
            return false;
        }
    }

    public User getCurrentUser() {
        return currentUser;
    }

    public void setCurrentUser(User currentUser) {
        this.currentUser = currentUser;
    }

    public void addToCurrentUsersCart(Product p) {
        currentUser.addToCart(p);
    }

    public boolean updateCurrentUser(String name, String email, String password, String phone, String address) {
        if (DBHandler.getInstance().updateUser(currentUser.getID(), name, email, password, phone, address)) {
            currentUser.setName(name);
            currentUser.setEmail(email);
            currentUser.setPassword(password);
            currentUser.setPhoneNum("" + phone);
            currentUser.setDeliveryDetails(address);
            return true;
        } else {
            return false;
        }
    }

    public boolean deleteBuyer(User u){
        return DBHandler.getInstance().deleteUser(u, "Buyer");
    }

    public boolean deleteSeller(User u){
        return DBHandler.getInstance().deleteUser(u, "Buyer");
    }

}
